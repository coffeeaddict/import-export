h1. ImportExport


A generic import and export plugin for rails, own implementation is required

h2. Dependencies

* FasterCSV


h2. Install

@./script/plugin install git://github.com/coffeeaddict/import-export.git@


h2. Example Import 

To make a thingy that imports cards:

in @lib/cards_import.rb@

bc.. include ImportExport

  class CardsImport < Importer
    def import(row)
  
      # Card is an ActiveRecord
      card = Card.new
  
      row.headers.each { |name|
        # lets assume the header matches the names of Card's attributes
        attr_name = name.downcase.gsub(/\s/, "_")
  
        card[attr_name] = row.field(name)
      }
   
      card.save
  
      if card.invalid?
        # writes the row to "file.csv.errors"
        log_error row
      else
        # writes the message to "file.csv.log"
        log card.name + " saved"
      end
    end
  end





p. In your controller:

bc.  include Imports
  ...
  import = CardsImport.new('/path/to/file.csv')
  import.run

Or for Delayed::Job (who needs imports right away?)

@Delayed::Job.enqueue CardsImport.new('/path/to/file.csv')@

run is an alias for perform, so this will work out of the box

The ImportExport module publishes the Importer (abstract) class into
your name space.


h2. Example Export 

To make something export

in @app/model/cards_exports.rb@

bc..   include ImportExport
  
  class CardsExport < Exporter
    before_export :setup
    after_export :extra_info
  
    def setup
      @col_sep = ","
      @row_sep = "\n"
    end
  
    def extra_info
      log "stuff has been exported"
    end
  
    def header
      [ "NAME", "IMAGE", "COLOR" ]
    end
  
    def export(card)
      return card.attributes.values_at("name", "image", "color")
    end
  end







p. in your controller:

bc.   include Exports
  ...
  # export all sold out cards
  export = CardsExport.new( :col_sep => '|', :file => "sold_out" )
  export.collect { Cards.find(:all, :conditions => [ "sold_out=?", true ]) }
  export.run

This will make file named sold_out.csv in @RAILS_ROOT/tmp@.

Or perhaps even simpler

bc.   export = CardsExport.new( :file => "all" ) { Cards.all }
  export.run


To send the file to the user, just

@return send_file(export.file, :type => "text/csv")@

The ImportExport module publishes the Importer (abstract) class into
your name space.


h2. Options

 * @:col_sep@ => The column seperator, defaults to @";"@
 * @:row_sep@ => The row seperator, defaults to @"\r\n"@
 * @:file@    => The name of the file import / export

h3. Import specific options

 * @:use_headers@ => Flag to use the first row as a header. The contents of the first row will not be included in the import.


h2. Extra files

The import process makes a number of files next to the actual data file

 * file.count : filled with the current line nr.
 * file.errors : filled rows you send to log_error()
 * file.log : filled with comments you placed in log

The export process makes the exact same files, but the count is only
written when the process is complete

The log file is always filled with a start and end date which is
written before the before_[import|export] callback methods and after
the after_[import|export] callback methods


h2. Author, license and notices

Copyright (c) 2009 Hartog C. de Mik, released under the MIT license
